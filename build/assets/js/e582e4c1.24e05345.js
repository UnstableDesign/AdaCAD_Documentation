"use strict";(self.webpackChunkada_cad_docs=self.webpackChunkada_cad_docs||[]).push([[631],{55693:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});var t=n(85893),s=n(11151);const r={},d="Cell",i={id:"develop/reference/cell/cell",title:"Cell",description:"This is a single cell or square within a drawdown. Unlike typical drafting where a cell can only be marked black, to raise a heddle at the cell's location, or white to indicate it as lowered, AdaCAD Cells can hold three values:",source:"@site/docs/develop/reference/cell/cell.md",sourceDirName:"develop/reference/cell",slug:"/develop/reference/cell/",permalink:"/docs/develop/reference/cell/",draft:!1,unlisted:!1,editUrl:"https://github.com/UnstableDesign/AdaCAD_Documentation/tree/main/docs/develop/reference/cell/cell.md",tags:[],version:"current",frontMatter:{},sidebar:"devSidebar",previous:{title:"How to Make an Operation",permalink:"/docs/develop/makeanoperation"},next:{title:"createCell",permalink:"/docs/develop/reference/cell/createCell"}},c={},a=[{value:"Related Functions",id:"related-functions",level:2}];function o(e){const l={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(l.h1,{id:"cell",children:"Cell"}),"\n",(0,t.jsxs)(l.p,{children:["This is a single cell or square within a ",(0,t.jsx)(l.a,{href:"/docs/develop/reference/drawdown/",children:"drawdown"}),". Unlike typical drafting where a cell can only be marked black, to raise a heddle at the cell's location, or white to indicate it as lowered, AdaCAD Cells can hold three values:"]}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsx)(l.li,{children:"heddle-up (black)"}),"\n",(0,t.jsx)(l.li,{children:"heddle-down (white)"}),"\n",(0,t.jsx)(l.li,{children:"unset (light blue)"}),"\n"]}),"\n",(0,t.jsx)(l.p,{children:"An unset heddle is functionally the same as a heddle down, but it can be used to indicate to the weaver that a weft yarn will not be used at this location, for instance, when shape weaving or using supplemental wefts that do not span the entire cloth width."}),"\n",(0,t.jsx)(l.p,{children:'For this reason, the "Cell" object in AdaCAD holds two values'}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsxs)(l.li,{children:[(0,t.jsx)(l.code,{children:"is_up"})," describing the position of the heddle as true/up/raised or false/down/lowered"]}),"\n",(0,t.jsxs)(l.li,{children:[(0,t.jsx)(l.code,{children:"is_set"})," relating to whether or not a weft travels over the warp at this location. ",(0,t.jsx)(l.code,{children:"is_set"})," value can be set/true or unset/false."]}),"\n"]}),"\n",(0,t.jsx)(l.p,{children:"The assignments are:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-jsx",metastring:'title="src/app/core/model/datatypes.js"',children:"export interface Cell{\n  is_set: boolean,\n  is_up: boolean\n}\n\n"})}),"\n",(0,t.jsxs)(l.p,{children:["The following designations are applied for each combination of values of ",(0,t.jsx)(l.code,{children:"is_up"})," and ",(0,t.jsx)(l.code,{children:"is_set"})]}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{children:(0,t.jsx)(l.code,{children:"is_set"})}),(0,t.jsx)(l.th,{children:(0,t.jsx)(l.code,{children:"is_up"})}),(0,t.jsx)(l.th,{children:"meaning"})]})}),(0,t.jsxs)(l.tbody,{children:[(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{children:"true"}),(0,t.jsx)(l.td,{children:"true"}),(0,t.jsx)(l.td,{children:"heddle is up / lifted"})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{children:"true"}),(0,t.jsx)(l.td,{children:"false"}),(0,t.jsx)(l.td,{children:"heddle is down / lowered"})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{children:"false"}),(0,t.jsx)(l.td,{children:"true"}),(0,t.jsx)(l.td,{children:"heddle is unset"})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{children:"false"}),(0,t.jsx)(l.td,{children:"false"}),(0,t.jsx)(l.td,{children:"heddle is unset"})]})]})]}),"\n",(0,t.jsxs)(l.p,{children:["There are a number of helper features to assist in easily getting, setting, and reading cell values in a file located at: ",(0,t.jsx)(l.a,{href:"https://github.com/UnstableDesign/AdaCAD/blob/main/src/app/core/model/cell.ts",children:"src/app/core/model/cell.js"})]}),"\n",(0,t.jsx)(l.h2,{id:"related-functions",children:"Related Functions"}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsx)(l.li,{children:(0,t.jsx)(l.a,{href:"/docs/develop/reference/cell/createCell",children:"createCell"})}),"\n",(0,t.jsx)(l.li,{children:(0,t.jsx)(l.a,{href:"/docs/develop/reference/cell/getCellValue",children:"getCellValue"})}),"\n",(0,t.jsx)(l.li,{children:(0,t.jsx)(l.a,{href:"/docs/develop/reference/cell/setCellValue",children:"setCellValue"})}),"\n"]})]})}function h(e={}){const{wrapper:l}={...(0,s.a)(),...e.components};return l?(0,t.jsx)(l,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},11151:(e,l,n)=>{n.d(l,{Z:()=>i,a:()=>d});var t=n(67294);const s={},r=t.createContext(s);function d(e){const l=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function i(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(r.Provider,{value:l},e.children)}}}]);