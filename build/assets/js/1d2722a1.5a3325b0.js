"use strict";(self.webpackChunkada_cad_docs=self.webpackChunkada_cad_docs||[]).push([[5184],{24691:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=o(85893),t=o(11151);const a={},s="Loom",i={id:"develop/reference/loom/loom",title:"Loom",description:"A loom simply holds information about the threading, tieup and treadling that can be used to generate a particular drawdown. threading is an array the same size as there are numbers of warps. Each value in the array is a number, corresponding to the frame upon which this warp will be threaded through. The indexing for the threading begins at 0 and increases to support the total number of frames required. treadling is an array the same size as there are numbers of wefts. Each value in the array is a number, corresponding to the treadle to press. The indexing for the threading begins at 0 and increases to support the total treadles of frames required. The tieup is a 2D array of boolean values representing if the treadle in the column is tied to the row corresponding to the frame.",source:"@site/docs/develop/reference/loom/loom.md",sourceDirName:"develop/reference/loom",slug:"/develop/reference/loom/",permalink:"/docs/develop/reference/loom/",draft:!1,unlisted:!1,editUrl:"https://github.com/UnstableDesign/AdaCAD_Documentation/tree/main/docs/develop/reference/loom/loom.md",tags:[],version:"current",frontMatter:{},sidebar:"devSidebar",previous:{title:"wefts",permalink:"/docs/develop/reference/drawdown/wefts"},next:{title:"Operation",permalink:"/docs/develop/reference/operation/"}},d={},l=[];function m(e){const n={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"loom",children:"Loom"}),"\n",(0,r.jsxs)(n.p,{children:["A loom simply holds information about the threading, tieup and treadling that can be used to generate a particular drawdown. ",(0,r.jsx)(n.code,{children:"threading"})," is an array the same size as there are numbers of warps. Each value in the array is a number, corresponding to the frame upon which this warp will be threaded through. The indexing for the threading begins at 0 and increases to support the total number of frames required. ",(0,r.jsx)(n.code,{children:"treadling"})," is an array the same size as there are numbers of wefts. Each value in the array is a number, corresponding to the treadle to press. The indexing for the threading begins at 0 and increases to support the total treadles of frames required. The ",(0,r.jsx)(n.code,{children:"tieup"})," is a 2D array of boolean values representing if the treadle in the column is tied to the row corresponding to the frame."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="src/app/core/model/datatypes.js"',children:"export type Loom = {\n  threading: Array<number>,\n  tieup: Array<Array<boolean>>,\n  treadling: Array<Array<number>>\n}\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["There are a number of helper features to assist in easily getting, setting, and reading loom values in a file located at: ",(0,r.jsx)(n.a,{href:"https://github.com/UnstableDesign/AdaCAD/blob/main/src/app/core/model/loom.ts",children:"src/app/core/model/loom.js"})]}),"\n",(0,r.jsx)(n.h1,{id:"loomutil",children:"LoomUtil"}),"\n",(0,r.jsx)(n.p,{children:"The loom util stores specific functions that can translate a drawdown to a loom, or vice versa. Different types of looms have different functions and methods for recomputing."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="src/app/core/model/datatypes.js"',children:"export type LoomUtil = {\n  type: 'jacquard' | 'frame' | 'direct',\n  displayname: string,\n  dx: string,\n  computeLoomFromDrawdown: (d:Drawdown, loom_settings: LoomSettings, origin: number) => Promise<Loom>,\n  computeDrawdownFromLoom: (l:Loom, origin: number) => Promise<Drawdown>,\n  recomputeLoomFromThreadingAndDrawdown:(l:Loom, loom_settings: LoomSettings, d: Drawdown, origin: number) => Promise<Loom>,\n  updateThreading: (l: Loom, ndx: InterlacementVal) => Loom,\n  updateTreadling: (l: Loom, ndx: InterlacementVal) => Loom,\n  updateTieup: (l: Loom, ndx: InterlacementVal)=> Loom,\n  insertIntoThreading: (l: Loom, j: number, val: number) => Loom,\n  insertIntoTreadling: (l: Loom, i: number, val: Array<number>) => Loom,\n  deleteFromThreading: (l: Loom, j: number) => Loom,\n  deleteFromTreadling: (l: Loom, i: number) => Loom,\n  pasteThreading: (l: Loom, drawdown: Drawdown, ndx: InterlacementVal, width:number, height: number) => Loom,\n  pasteTreadling: (l: Loom, drawdown: Drawdown, ndx: InterlacementVal, width:number, height: number) => Loom,\n  pasteTieup: (l: Loom, drawdown: Drawdown, ndx: InterlacementVal, width:number, height: number)=> Loom\n}\n\n\n"})}),"\n",(0,r.jsx)(n.h1,{id:"loomsettings",children:"LoomSettings"}),"\n",(0,r.jsxs)(n.p,{children:["This type stores the particular user-defined settings associated with any given loom. This includes the type of loom that this set of settings is associated with. The ",(0,r.jsx)(n.code,{children:"epi"})," or density of the loom. The ",(0,r.jsx)(n.code,{children:"units"})," by which densite is computed. It also holds the number of  ",(0,r.jsx)(n.code,{children:"frames"})," and  ",(0,r.jsx)(n.code,{children:"treadles"})," that the user describes their loom having."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="src/app/core/model/datatypes.js"',children:"\n export type LoomSettings = {\n  type: string,\n  epi: number,\n  units: 'cm' | 'in',\n  frames: number,\n  treadles: number,\n}\n"})})]})}function c(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>i,a:()=>s});var r=o(67294);const t={},a=r.createContext(t);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);